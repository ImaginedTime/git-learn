git status => checks the status of all file

git add --a => add all the files to the staging area
git add <name of the file> => add the specific file to the staging area
git add . => add all the files to the staging area

git commit -m "message" => commits every staged file to the current branch with the following message
git commit -a -m "message" => commits every tracked file to the current branch with the following message

git rm <file to be removed> => removes a file 
git mv <file to be moved> <path to be moved to> => can be used to move or rename a file

git log => shows all commits
git log -p => shows all the commits with their diff from the previous commits
git log --stat => shows all the commits with their number of changes done
git log --pretty=oneline => shows the commits in a single line, with each commit taking oneline each
git log --pretty=short => shows all the commits but in a shorter words
git log --since=n.days => shows all the commits in the last n days
git log --since=n.weeks => shows all the commits in the last n weeks

git diff => shows the changes that has been made in the tracked files before staging it
git diff --staged => after adding the files to the staged area, it compares the changes made to the staged file with the previous commit
git diff <commit_hash> <commit_hash> => compares two commits    

git restore --staged <filename> => removes a staged file from the staging area
//use carfully the below operation
git restore <filename> => gives back the previously commited version of the file

git checkout -- <filename.txt> => make this specific file the previous version of itself
git checkout -f => roll back to the previous commit 

git remote add origin <git website> => creates a remote git

git push -u origin master => pushes the master branch on to the github repo
git push -u origin <branchName> => pushes the branch on to the github repo
git push origin <branchName> => pushes the branch on to the github repo
git push --all => pushes all the branches
git push origin <branchName>:<someOtherBranchName> => pushes the branch on the github repo with the following other branch name\


git config --global alias.<some alias> <property> => makes alias for a property. For ex- git config --global alias.s status means setting an alias for git status command to git s

git checkout -b <branchName> => Creates a new branch with the specified name
git checkout <branchName> => goes to the specified branch

git branch => list out the names of all the branches
git branch -v => list out all the names of all the branches with their last commit hash and message
git branch --merged => list out the branches that have been merged
git branch --no-merged => list out the branches that have not been merged

git branch -d <branchName> => tries to delete a branch, if it has already been merged or else gives as error that the branch has not been merged
// if you still want to delete the branch eventhough it has not been merged
// run the command again but with a capital D instead
git branch -D <branchName> => deletes the branch, if the above failed

git merge <branchName> => merges the branch
// after resolving merge conflicts
// run git status, then git add ., then git commit -m "Message"